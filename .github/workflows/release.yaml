name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "cgnize"

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.verify_versions.outputs.version }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Verificar se a tag e _version.py coincidem
        id: verify_versions
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION_FROM_TAG="${TAG_NAME#v}"
          
          # Obtém a versão do arquivo src/_version.py
          VERSION_FROM_FILE=$(python -c "from src._version import __version__; print(__version__)")

          echo "Versão da Tag: ${VERSION_FROM_TAG}"
          echo "Versão do Arquivo: ${VERSION_FROM_FILE}"

          if [ "${VERSION_FROM_TAG}" != "${VERSION_FROM_FILE}" ]; then
            echo "::error::Erro: A versão da tag Git ('${VERSION_FROM_TAG}') não é a mesma da versão em _version.py ('${VERSION_FROM_FILE}')!"
            exit 1
          fi

          echo "As versões coincidem. Prosseguindo com a versão ${VERSION_FROM_TAG}"
          echo "version=${VERSION_FROM_TAG}" >> "$GITHUB_OUTPUT"

  build_wheels:
    name: Build pure Python wheel
    needs: get_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar build
        run: python -m pip install --upgrade build

      - name: Construir sdist e wheel
        run: python -m build

      - name: Upload dos artefatos
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  pypi_publish:
    name: Publicar no PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Baixar todos os artefatos
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
          merge-multiple: true

      - name: Publicar no PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Criar GitHub Release
    needs: [get_version, pypi_publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Baixar todos os pacotes
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: dist-*
          merge-multiple: true

      - name: Criar GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.get_version.outputs.version }}
        run: |
          gh release create "${{ github.ref_name }}" dist/* \
            --title "${{ env.PACKAGE_NAME }} ${{ env.VERSION }}" \
            --generate-notes